1.    **SOFTWARE ENGINEERING** is the systematic application of engineering principles, method and
    tools to develop  and maintain high-quality software systems, acceptable and easy to use
    by consumers.
    IMPORTANCE: Its importance is seen in the fact that software applications and systems
    powers various aspects of mordern life, including communication, commerce, entertainment,
    and healthcare.
2.  - The establishement of Software Engineering as a discipline (1960s)
    - The advent of structured programming (1970s)
    III. The rise of agile methodologies (2000s)
3.  - Software Development Life Cycle (SDLC) consists of several phases, including:
    - Requirements: Gathering and documenting user needs and system requirements.
    - Design: Creating high-level and detailed designs of the software architecture and user interface.
    - Implementation: Writing code and building the software according to the design specifications.
    - Testing: Conducting various tests to ensure the software meets quality standards and functional requirements.
    - Deployment: Releasing the software to users or customers.
    - Maintenance: Providing ongoing support, updates, and enhancements to the software after deployment.
4.  The Waterfall methodology is a sequential approach with different phases that flows
    downward like a river, it focuses on the requirement, design, implementation phases.
    While the Agile methodology implements iterative method focused on flexibility, collaborations, and responding to changes.
5. Software Developer: Responsible for writing code and implementing software solutions.
  - Quality Assurance Engineer: Ensures software quality by designing and executing test plans.
  - Project Manager: Oversees the planning, execution, and delivery of software projects.
6.   - Integrated Development Environments (IDEs): Software suites that provide comprehensive tools for writing, debugging, and testing code (e.g., Visual Studio, Eclipse, IntelliJ IDEA).
  - Version Control Systems (VCS): Software tools for tracking changes to source code and coordinating work among team members (e.g., Git, Subversion)
7. - Changing Requirements: Requirements may change during the development cycle, leading to scope creep and project delays.
  - Tight Deadlines: Pressure to deliver software products on schedule can result in rushed development and compromised quality.
  - Technical Debt: Accrued from shortcuts or suboptimal solutions, technical debt can impede future development efforts and increase maintenance costs.
    **Strategies for Overcoming Challenges**: Strategies for overcoming challenges include effective communication, agile methodologies, prioritization of tasks, and regular reassessment of project goals and timelines.
8. - Unit Testing: Testing individual components or modules of software.
  - Integration Testing: Testing interactions between different components or subsystems.
  - System Testing: Testing the entire software system as a whole.
  - Acceptance Testing: Testing the software against user requirements to ensure it meets user needs.
    **Importance of Quality Control:** Quality control measures such as code reviews, automated testing, and continuous integration help identify and fix defects early in the development process, leading to higher-quality software products.